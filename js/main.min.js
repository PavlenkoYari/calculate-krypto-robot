window.addEventListener('DOMContentLoaded', (event) => {
      const CalculatorEvent = {
          prices: {},
          
          miningPerHour: (miningPower = 0, lowerBound) => {
              const body = {
                  json: true,
                  code: "kryptonstake",
                  table: "accounts",
                  scope: "kryptonstake",
                  limit: "10000",
              };
              
              if(lowerBound) {
                  body.lower_bound = lowerBound
              }
              
              return fetch('https://wax.eosphere.io/v1/chain/get_table_rows', {
                  method: "POST",
                  body: JSON.stringify(body)
              })
              .then(res => res.json())
              .then(res => {
                  const newMiningPower = res.rows.reduce((accum, user) => {
                      accum += Number(user.mining_power);
                      return accum
                  }, miningPower);
                  
                  if(res.more) {
                      return CalculatorEvent.miningPerHour(newMiningPower, res.next_key)
                  }
                  const miningPerHourBlock = document.getElementById("mining_per_hour");
                  miningPerHourBlock.innerHTML = `<span style="text-decoration: none">Mining power:</span>${Number(13541 / newMiningPower).toFixed(4)} Cube/hr`;
                  
                  return 13541 / newMiningPower
              })
          },
          getCubePrice: (waxPriceInUsd) => {
              return fetch('https://wax.alcor.exchange/api/markets/296')
              .then(res => res.json())
              .then(res => {
                  const cubePriceBlock = document.getElementById("cube_price");
                  cubePriceBlock.innerHTML = `<span>Cube Price:</span>${Number(res.last_price).toFixed(4)} WAX / ${Number(res.last_price * waxPriceInUsd).toFixed(4)} USD`;
                  
                  return res.last_price
              })
          },
          getKryptonPrice: (waxPriceInUsd) => {
              return fetch('https://wax.alcor.exchange/api/markets/297')
              .then(res => res.json())
              .then(res => {
                  const kryptonPriceBlock = document.getElementById("krypton_price");
                  kryptonPriceBlock.innerHTML = `<span>Krypton Price:</span>${Number(res.last_price).toFixed(4)} WAX / ${Number(res.last_price * waxPriceInUsd).toFixed(4)} USD`;
                  
                  return res.last_price;
              })
          },
          getPrices: () => {
              return fetch('https://api.coingecko.com/api/v3/simple/price?ids=wax&vs_currencies=usd')
              .then(res => res.json())
              .then(res => {
                  const waxPrice = res.wax.usd;
                  const waxPriceBlock = document.getElementById("wax_price");
                  waxPriceBlock.innerHTML = `<span>WAX Price:</span>${Number(waxPrice).toFixed(4)} USD`;
                  
                  return Promise.all([CalculatorEvent.miningPerHour(), CalculatorEvent.getCubePrice(waxPrice), CalculatorEvent.getKryptonPrice(waxPrice)])
                  .then(res => {
                      document.querySelector('.loader').remove();
                      const [miningPerHour, cubePrice, kryptonPrice] = res;
                      
                      CalculatorEvent.prices = {
                          waxPrice,
                          cubePrice,
                          kryptonPrice,
                          miningPerHour,
                      }
                      
                      CalculatorEvent.getFactionRanks();
                      
                      return {
                          waxPrice,
                          cubePrice,
                          kryptonPrice,
                          miningPerHour,
                      }
                  })
              })
          },
          
          getFactionRanks: (defaultValues = {titan: [], asteria: [], chaos: []}, lowerBound) => {
              const body = {
                  json: true,
                  code: "kryptonmissn",
                  table: "atksmission",
                  scope: "kryptonmissn",
                  limit: "10000",
              }
              
              if(lowerBound) {
                  body.lower_bound = lowerBound
              }
              
              fetch('https://wax.eosphere.io/v1/chain/get_table_rows', {
                  method: "POST",
                  body: JSON.stringify(body)
              })
              .then(res => res.json())
              .then(res => {
                  const factions = res.rows.reduce((accum, user) => {
                      if(user.race === "Titan") {
                          accum.titan = [...accum.titan, user];
                      }
                      if(user.race === "Astraea") {
                          accum.asteria = [...accum.asteria, user];
                      }
                      if(user.race === "Chaos") {
                          accum.chaos = [...accum.chaos, user];
                      }
                      
                      return accum
                  }, defaultValues)
                  
                  if(res.more) {
                      return CalculatorEvent.getFactionRanks(factions, res.next_key)
                  }
                  
                  const factionOptions = {
                      titan: {
                          color: "rgb(253, 18, 73)",
                          name: "Titan",
                      },
                      chaos: {
                          color: "rgb(206, 0, 255)",
                          name: "Chaos",
                      },
                      asteria: {
                          color: "rgb(58, 175, 252)",
                          name: "Asteria",
                      }
                  };
                  
                  Object.keys(factions).forEach(faction => {
                      const block = document.getElementById(faction);
                      block.insertAdjacentHTML('beforeend', `<div class="sticky faction__table_title" style="color: ${factionOptions[faction].color}">${factionOptions[faction].name}</div>`);
                      block.insertAdjacentHTML('beforeend', `<div class="sticky faction__table_row"><div class="faction__table_cell">Rank</div><div class="faction__table_cell">User</div><div class="faction__table_cell">Mission score</div></div>`);
                  });
                  
                  Object.keys(factions).map(faction => {
                      const block = document.getElementById(faction);
                      const sortedFactions = factions[faction].sort((a, b) => b.atk_power - a.atk_power);
                      sortedFactions.forEach((user, index) => {
                          block.insertAdjacentHTML('beforeend', `<div class="faction__table_row"><div class="faction__table_cell">${index + 1}</div><div class="faction__table_cell">${user.user}</div><div class="faction__table_cell">${user.atk_power}</div></div>`);
                      })
                  })
              })
          },
          
          getStamina: () => {
              fetch('https://wax.eosphere.io/v1/chain/get_table_rows', {
                  method: "POST",
                  body: JSON.stringify({
                      json: true,
                      code: "kryptonasset",
                      table: "assetsinfos",
                      scope: "kryptonasset",
                      limit: "1",
                      lower_bound: document.querySelector(".calculator__form.stamina .form .form__group_field[name='asset_id']").value
                  })
              })
              .then(res => res.json())
              .then(res => {
                  const staminaInfoBlock = document.getElementById('staminaInfo');
                  const [item] = res.rows;
                  
                  if(!item) {
                      document.querySelector(".calculator__form.stamina .form .form__group_field[name='asset_id']").value = "";
                      let staminaInfoString = "";
                      staminaInfoString += `<p class="calculator__result_item">Stamina info: <span>0/0</span></p>`;
                      staminaInfoString += `<p class="calculator__result_item">HP info: <span>0/0</span></p>`;
                      staminaInfoBlock.innerHTML = staminaInfoString;
                      return alert("Nothing not found")
                  }
                  
                  document.querySelector(".calculator__form.stamina .form .form__group_field[name='asset_id']").value = item.asset_id;
                  
                  let staminaInfoString = "";
                  staminaInfoString += `<p class="calculator__result_item">Stamina info: <span>${item.stamina_remain}/${item.stamina}</span></p>`;
                  staminaInfoString += `<p class="calculator__result_item">HP info: <span>${item.hp_remain}/${item.hp}</span></p>`;
                  
                  staminaInfoBlock.innerHTML = staminaInfoString;
              })
              .catch((e) => {
                  console.error(e)
                  alert("Nothing not found")
              })
          },
          getStaminaHandler: () => {
              $('.calculator__form.stamina .form__submit').click(() => {
                  CalculatorEvent.getStamina()
              })
          },
          
          getUserInfo: () => {
              fetch('https://wax.eosphere.io/v1/chain/get_table_rows', {
                  method: "POST",
                  body: JSON.stringify({
                      json: true,
                      code: "kryptonmissn",
                      table: "atksmission",
                      scope: "kryptonmissn",
                      limit: "1",
                      lower_bound: document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value,
                      upper_bound: document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value,
                  })
              })
              .then(res => res.json())
              .then(res => {
                  const [firstInfo] = res.rows;
                  
                  if(!firstInfo) {
                      const userInfoBlock = document.getElementById('user_info');
                      document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value = "";
                      
                      let userInfoString = "";
                      userInfoString += `<p class="calculator__result_item">Wallet address: <span>N/A</span></p>`;
                      userInfoString += `<p class="calculator__result_item">User race: <span>N/A</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Mining power, Cube: <span>0</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Attack power: <span>0</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Mission score: <span>0</span></p>`;
                      
                      userInfoBlock.innerHTML = userInfoString;
                      return alert("Nothing not found")
                  }
                  
                  fetch('https://wax.eosphere.io/v1/chain/get_table_rows', {
                      method: "POST",
                      body: JSON.stringify({
                          json: true,
                          code: "kryptonstake",
                          table: "accounts",
                          scope: "kryptonstake",
                          limit: "1",
                          lower_bound: document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value,
                          upper_bound: document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value,
                      })
                  })
                  .then(res => res.json())
                  .then(res => {
                      const [secondInfo] = res.rows;
    
                      if(!secondInfo) {
                          const userInfoBlock = document.getElementById('user_info');
                          document.querySelector(".calculator__form.userStatistic .form .form__group_field[name='playermission']").value = "";
        
                          let userInfoString = "";
                          userInfoString += `<p class="calculator__result_item">Wallet address: <span>N/A</span></p>`;
                          userInfoString += `<p class="calculator__result_item">User race: <span>N/A</span></p>`;
                          userInfoString += `<p class="calculator__result_item">Mining power, Cube: <span>0</span></p>`;
                          userInfoString += `<p class="calculator__result_item">Attack power: <span>0</span></p>`;
                          userInfoString += `<p class="calculator__result_item">Mission score: <span>0</span></p>`;
        
                          userInfoBlock.innerHTML = userInfoString;
                          return alert("Nothing not found")
                      }
                      
                      const userInfoBlock = document.getElementById('user_info');
                      
                      let userInfoString = "";
                      userInfoString += `<p class="calculator__result_item">Wallet address: <span>${firstInfo.user}</span></p>`;
                      userInfoString += `<p class="calculator__result_item">User race: <span>${firstInfo.race}</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Mining power, Cube: <span>${(Number(secondInfo.mining_power)).toFixed(4)}</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Attack power: <span>${Number(secondInfo.attack_power).toFixed(4)}</span></p>`;
                      userInfoString += `<p class="calculator__result_item">Mission score: <span>${firstInfo.atk_power}</span></p>`;
                      
                      userInfoBlock.innerHTML = userInfoString;
                  })
                  .catch((e) => {
                      console.error(e)
                      alert("Nothing not found")
                  })
              })
          },
          getUserInfoHandler: () => {
              $('.calculator__form.userStatistic .form__submit').click(() => {
                  CalculatorEvent.getUserInfo()
              })
          },
          
          calculate: (hours = 24 * 30) => {
              const {
                  waxPrice,
                  cubePrice,
                  kryptonPrice,
                  miningPerHour,
              } = CalculatorEvent.prices;
              
              const commonMinerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='common']").value || 0;
              const silverMinerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='silver']").value || 0;
              const goldsMinerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='gold']").value || 0;
              const commonAttakerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='commona']").value || 0;
              const silverAttakerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='silvera']").value || 0;
              const goldsAttakerCount = document.querySelector(".calculator__form.calculator .form .form__group_field[name='golda']").value || 0;
              
              if(!commonMinerCount && !silverMinerCount && !goldsMinerCount && !commonAttakerCount && !silverAttakerCount && !goldsAttakerCount){
                  const expenseAllBlock = document.getElementById('expense_all');
                  let expenseAllString = "";
                  expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>0</span></p>`;
                  expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>0</span></p>`;
                  expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>0</span></p>`;
                  expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>0</span></p>`;
                  expenseAllBlock.innerHTML = expenseAllString;
    
                  const expenseMinerBlock = document.getElementById('expense_miner');
                  let expenseMinerString = "";
                  expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>0</span></p>`;
                  expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>0</span></p>`;
                  expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>0</span></p>`;
                  expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>0</span></p>`;
                  expenseMinerBlock.innerHTML = expenseMinerString;
    
                  const expenseAttakerBlock = document.getElementById('expense_attaker');
                  let expenseAttakerString = "";
                  expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>0</span></p>`;
                  expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>0</span></p>`;
                  expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>0</span></p>`;
                  expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>0</span></p>`;
                  expenseAttakerBlock.innerHTML = expenseAttakerString;
    
                  const incomeBlock = document.getElementById('income_net');
                  let incomeString = "";
                  incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto Cube</span> income: <span>0</span></p>`;
                  incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto WAX</span> income: <span>0</span></p>`;
                  incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto USD</span> income: <span>0</span></p>`;
                  incomeBlock.innerHTML = incomeString;
    
                  const incomeBruttoBlock = document.getElementById('income_brutto');
                  let incomeBruttoString = "";
                  incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto Cube</span> income: <span>0</span></p>`;
                  incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto WAX</span> income: <span>0</span></p>`;
                  incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto USD</span> income: <span>0</span></p>`;
                  incomeBruttoBlock.innerHTML = incomeBruttoString;
                  
                  return;
              }
              
              const tablesCalculate = {
                  miners: {
                      income: {
                          cube: {
                              common: 1,
                              silver: 1.3,
                              gold: 3,
                          },
                      },
                      expense: {
                          cube: {
                              common: 3 / (100 / 6),
                              silver: 3 / (125/ 6),
                              gold: 3 / (180 / 6),
                          },
                          krypton: {
                              common: 0.015 / (100 / 6),
                              silver: 0.15 / (125/ 6),
                              gold: 0.15 / (180 / 6),
                          }
                      },
                  },
                  attakers: {
                      info: {
                          hp: {
                              common: 100,
                              silver: 120,
                              gold: 300,
                          },
                          stamina: {
                              common: 0.1875,
                              silver: 0.1429,
                              gold: 0.1,
                          },
                      },
                      expense: {
                          cube: {
                              common: 3 / (100 / (6 / 3)),
                              silver: 3 / (120 / (6 / 3)),
                              gold: 3 / (170 / (6 / 3)),
                          },
                          krypton: {
                              common: 0.15 / (100 / (6 / 3)),
                              silver: 0.15 / (120 / (6 / 3)),
                              gold: 0.15 / (170 / (6 / 3)),
                          }
                      },
                  }
              };
              
              const minerExpenseCubeInHour = commonMinerCount * tablesCalculate.miners.expense.cube.common + silverMinerCount * tablesCalculate.miners.expense.cube.silver + goldsMinerCount * tablesCalculate.miners.expense.cube.gold;
              const attakerExpenseCubeInHour = commonAttakerCount * tablesCalculate.attakers.expense.cube.common + silverAttakerCount * tablesCalculate.attakers.expense.cube.silver + goldsAttakerCount * tablesCalculate.attakers.expense.cube.gold;
              
              const minerExpenseKryptonInHour = commonMinerCount * tablesCalculate.miners.expense.krypton.common + silverMinerCount * tablesCalculate.miners.expense.krypton.silver + goldsMinerCount * tablesCalculate.miners.expense.krypton.gold;
              const attakerExpenseKryptonInHour = commonAttakerCount * tablesCalculate.attakers.expense.krypton.common + silverAttakerCount * tablesCalculate.attakers.expense.krypton.silver + goldsAttakerCount * tablesCalculate.attakers.expense.krypton.gold;
              
              const expenseAllBlock = document.getElementById('expense_all');
              let expenseAllString = "";
              expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>${Number((minerExpenseCubeInHour + attakerExpenseCubeInHour) * hours).toFixed(4)}</span></p>`;
              expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>${Number((minerExpenseKryptonInHour + attakerExpenseKryptonInHour) * hours).toFixed(4)}</span></p>`;
              expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>${Number(((minerExpenseKryptonInHour + attakerExpenseKryptonInHour) * kryptonPrice + (minerExpenseCubeInHour + attakerExpenseCubeInHour) * cubePrice) * hours).toFixed(4)}</span></p>`;
              expenseAllString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>${Number(((minerExpenseKryptonInHour + attakerExpenseKryptonInHour) * kryptonPrice + (minerExpenseCubeInHour + attakerExpenseCubeInHour) * cubePrice) * waxPrice * hours).toFixed(4)}</span></p>`;
              expenseAllBlock.innerHTML = expenseAllString;
              
              const expenseMinerBlock = document.getElementById('expense_miner');
              let expenseMinerString = "";
              expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>${Number(minerExpenseCubeInHour * hours).toFixed(4)} </span></p>`;
              expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>${Number(minerExpenseKryptonInHour * hours).toFixed(4)} </span></p>`;
              expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>${Number((minerExpenseCubeInHour * cubePrice * hours + minerExpenseKryptonInHour * kryptonPrice * hours)).toFixed(4)}</span></p>`;
              expenseMinerString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>${Number((minerExpenseCubeInHour * cubePrice * hours + minerExpenseKryptonInHour * kryptonPrice * hours) * waxPrice).toFixed(4)}</span></p>`;
              expenseMinerBlock.innerHTML = expenseMinerString;
              
              const expenseAttakerBlock = document.getElementById('expense_attaker');
              let expenseAttakerString = "";
              expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Cube</span> cost: <span>${Number(attakerExpenseCubeInHour * hours).toFixed(4)}</span></p>`;
              expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">Krypton</span> cost: <span>${Number(attakerExpenseKryptonInHour * hours).toFixed(4)}</span></p>`;
              expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">WAX</span> cost: <span>${Number((attakerExpenseCubeInHour * cubePrice * hours + attakerExpenseKryptonInHour * kryptonPrice * hours)).toFixed(4)}</span></p>`;
              expenseAttakerString += `<p class="calculator__result_item"><span style="font-weight: bold;">USD</span> cost: <span>${Number((attakerExpenseCubeInHour * cubePrice * hours + attakerExpenseKryptonInHour * kryptonPrice * hours) * waxPrice).toFixed(4)}</span></p>`;
              expenseAttakerBlock.innerHTML = expenseAttakerString;
              
              
              const minerIncomeInHour = commonMinerCount * tablesCalculate.miners.income.cube.common * miningPerHour + silverMinerCount * tablesCalculate.miners.income.cube.silver * miningPerHour + goldsMinerCount * tablesCalculate.miners.income.cube.gold * miningPerHour;
              const minerIncomeInHourNetWAX = minerIncomeInHour * cubePrice - (cubePrice * (minerExpenseCubeInHour + attakerExpenseCubeInHour)) - (kryptonPrice * (minerExpenseKryptonInHour + attakerExpenseKryptonInHour));
              const minerIncomeInHourNetUSD = minerIncomeInHourNetWAX * waxPrice;
              const minerIncomeInHourBruttoWAX = minerIncomeInHour * cubePrice;
              const minerIncomeInHourBruttoUSD = minerIncomeInHourBruttoWAX * waxPrice;
              
              const incomeBlock = document.getElementById('income_net');
              let incomeString = "";
              incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto Cube</span> income: <span>${Number(minerIncomeInHour * hours).toFixed(4)}</span></p>`;
              incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto WAX</span> income: <span>${Number(minerIncomeInHourNetWAX * hours).toFixed(4)}</span></p>`;
              incomeString += `<p class="calculator__result_item"><span style="font-weight: bold;">Netto USD</span> income: <span>${Number(minerIncomeInHourNetUSD * hours).toFixed(4)}</span></p>`;
              incomeBlock.innerHTML = incomeString;
              
              const incomeBruttoBlock = document.getElementById('income_brutto');
              let incomeBruttoString = "";
              incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto Cube</span> income: <span>${Number(minerIncomeInHour * hours).toFixed(4)}</span></p>`;
              incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto WAX</span> income: <span>${Number(minerIncomeInHourBruttoWAX * hours).toFixed(4)}</span></p>`;
              incomeBruttoString += `<p class="calculator__result_item"><span style="font-weight: bold;">Brutto USD</span> income: <span>${Number(minerIncomeInHourBruttoUSD * hours).toFixed(4)}</span></p>`;
              incomeBruttoBlock.innerHTML = incomeBruttoString;
          },
          calculateHandler: () => {
              $('.calculator__form.calculator .form__group_field').keyup(() => {
                  CalculatorEvent.calculate()
              });
              $(".calculator__result.calculator .calculator__result_action_btn").click((e) => {
                  const $this = $(e.currentTarget);
                  if($this.data('dateRange') === "hour") {
                      CalculatorEvent.calculate(1)
                  }
                  if($this.data('dateRange') === "day") {
                      CalculatorEvent.calculate(24)
                  }
                  if($this.data('dateRange') === "month") {
                      CalculatorEvent.calculate(24 * 30)
                  }
                  
                  $('.calculator__result.calculator .calculator__result_action_btn').removeClass('active')
                  $this.addClass('active')
              });
          },
    
          converter: () => {
              const {
                  waxPrice,
                  cubePrice,
                  kryptonPrice,
              } = CalculatorEvent.prices;
              
              const cubeCount = Number(document.querySelector(".calculator__form.converter .form .form__group_field[name='cube_count']").value) || 0;
              const kryptonCount = Number(document.querySelector(".calculator__form.converter .form .form__group_field[name='krypton_count']").value) || 0;
              const waxCount = Number(document.querySelector(".calculator__form.converter .form .form__group_field[name='wax_count']").value) || 0;
    
              if(!cubeCount){
                  const cubeCountBlock = document.getElementById('cube_count');
                  let cubeCountString = "";
                  cubeCountString += `<p class="calculator__result_item">CUBE to WAX: <span>0</span></p>`;
                  cubeCountString += `<p class="calculator__result_item">CUBE to USD: <span>0</span></p>`;
                  cubeCountBlock.innerHTML = cubeCountString;
              }else{
                  const cubeCountBlock = document.getElementById('cube_count');
                  let cubeCountString = "";
                  cubeCountString += `<p class="calculator__result_item">${cubeCount} CUBE to WAX: <span>${Number(cubePrice * cubeCount).toFixed(4)}</span></p>`;
                  cubeCountString += `<p class="calculator__result_item">${cubeCount} CUBE to USD: <span>${Number(cubePrice * waxPrice * cubeCount).toFixed(4)}</span></p>`;
                  cubeCountBlock.innerHTML = cubeCountString;
              }
              
              if(!kryptonCount){
                  const kryptonCountBlock = document.getElementById('krypton_count');
                  let kryptonCountString = "";
                  kryptonCountString += `<p class="calculator__result_item">KRYPTON to WAX: <span>0</span></p>`;
                  kryptonCountString += `<p class="calculator__result_item">KRYPTON to USD: <span>0</span></p>`;
                  kryptonCountBlock.innerHTML = kryptonCountString;
              }else{
                  const kryptonCountBlock = document.getElementById('krypton_count');
                  let kryptonCountString = "";
                  kryptonCountString += `<p class="calculator__result_item">${kryptonCount} KRYPTON to WAX: <span>${Number(kryptonPrice * kryptonCount).toFixed(4)}</span></p>`;
                  kryptonCountString += `<p class="calculator__result_item">${kryptonCount} KRYPTON to USD: <span>${Number(kryptonPrice * waxPrice * kryptonCount).toFixed(4)}</span></p>`;
                  kryptonCountBlock.innerHTML = kryptonCountString;
              }
              
              if(!waxCount){
                  const waxCountBlock = document.getElementById('wax_count');
                  let waxCountString = "";
                  waxCountString += `<p class="calculator__result_item">WAX to USD: <span>0</span></p>`;
                  waxCountBlock.innerHTML = waxCountString;
              }else{
                  const waxCountBlock = document.getElementById('wax_count');
                  let waxCountString = "";
                  waxCountString += `<p class="calculator__result_item">${waxCount} WAX to USD: <span>${Number(waxCount * waxPrice).toFixed(4)}</span></p>`;
                  waxCountBlock.innerHTML = waxCountString;
              }
          },
          converterHandler: () => {
              $('.calculator__form.converter .form__group_field').keyup(() => {
                  CalculatorEvent.converter()
              });
          },
          
          loaderText: () => {
              const texts = ["Keep calm and mining cube", "Добро к добру", "Smile more often, it will save the world", "The robots are coming. Watch your back", "Be calm and just enjoy", "If not today, then when?", "It's just the word 'CAT'", "The universe sees everything", "Look forward. The gears are spinning", "Robots are one piece. Be whole, be robot!", "Robot like a exchange rate, you never know when to collapse"];
              const string = texts[Math.floor(Math.random() * (texts.length + 1))];
              if(!string){
                  return CalculatorEvent.loaderText()
              }
              
              document.querySelector(".loader .loader__text").innerHTML = string
          },
      }
      
      
      CalculatorEvent.loaderText();
      CalculatorEvent.getPrices();
      CalculatorEvent.calculateHandler();
      CalculatorEvent.getUserInfoHandler();
      CalculatorEvent.getStaminaHandler();
      CalculatorEvent.converterHandler();
  }
);
